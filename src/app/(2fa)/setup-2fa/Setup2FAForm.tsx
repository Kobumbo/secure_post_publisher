'use client';

import { useState, useEffect } from 'react';
import QRCode from 'qrcode';
import Image from 'next/image';

interface Setup2FAFormProps {
    userId: string; 
}

export default function Setup2FAForm({ userId }: Setup2FAFormProps) {
    const [qrCodeUrl, setQrCodeUrl] = useState('');
    const [totpSecret, setTotpSecret] = useState('');
    const [verificationCode, setVerificationCode] = useState('');
    const [isVerified, setIsVerified] = useState(false);
    const [errorMessage, setErrorMessage] = useState<string | null>(null);

    useEffect(() => {
        const generateSecret = async () => {
            try {
                const response = await fetch('/api/2fa/setup/generate', {
                    method: 'POST',
                    body: JSON.stringify({ userId }),
                    headers: { 'Content-Type': 'application/json' },
                });

                const data = await response.json();

                if (response.ok) {
                    setTotpSecret(data.secret); // Store the secret for verification
                    const qrCodeData = await QRCode.toDataURL(data.otpauthUrl, { width: 300 });
                    setQrCodeUrl(qrCodeData);
                } else {
                    setErrorMessage(data.message || 'Failed to generate 2FA secret.');
                }
            } catch {
                setErrorMessage('An error occurred while generating the 2FA secret.');
            }
        };

        generateSecret();
    }, [userId]);

    const handleVerify = async () => {
        setErrorMessage(null);

        try {
            const response = await fetch('/api/2fa/setup/verify', {
                method: 'POST',
                body: JSON.stringify({ userId, code: verificationCode, secret: totpSecret }),
                headers: { 'Content-Type': 'application/json' },
            });

            if (response.ok) {
                setIsVerified(true);
            } else {
                const data = await response.json();
                if (data.errors && Array.isArray(data.errors)) {
                    setErrorMessage(data.errors[0]?.message || 'Verification failed. Please try again.');
                } else {
                    setErrorMessage(data.message || 'Verification failed. Please try again.');
                }
            }
        } catch {
            setErrorMessage('An error occurred during verification.');
        }
    };

    if (isVerified) {
        return (
            <div className="text-center">
                <p className="text-green-500 text-lg">2FA setup complete! You’re all set.</p>
                <button
                    onClick={() => (window.location.href = '/')}
                    className="mt-4 py-2 px-4 rounded bg-[#3a3a3a] hover:bg-[#4a4a4a] text-[#e0e0e0]"
                >
                    Go to Homepage
                </button>
            </div>
        );
    }

    return (
        <div className="text-center">
            {errorMessage && <p className="text-red-500 text-sm mb-4">{errorMessage}</p>}
            <div className="mb-6">
                {qrCodeUrl ? (
                    <Image
                        src={qrCodeUrl}
                        alt="Scan this QR code with your authenticator app"
                        width={300}
                        height={300}
                        className="mx-auto"
                    />
                ) : (
                    <p>Loading QR Code...</p>
                )}
            </div>
            {totpSecret && (
                <div className="mb-6">
                    <p className="text-[#a0a0a0] text-sm mb-2">
                        Can’t scan the QR code? Enter this code manually in your authenticator app:
                    </p>
                    <p className="text-lg font-bold text-[#e0e0e0] bg-[#3a3a3a] px-4 py-2 rounded-lg inline-block">
                        {totpSecret}
                    </p>
                </div>
            )}
            <p className="text-sm text-[#a0a0a0] mb-4">
                After scanning the QR code or entering the code, enter the 6-digit code generated by your app below.
            </p>
            <div>
                <input
                    type="text"
                    placeholder="Enter verification code"
                    value={verificationCode}
                    onChange={(e) => setVerificationCode(e.target.value)}
                    className="w-full px-4 py-2 bg-[#2c2c2c] text-[#e0e0e0] border border-[#3d3d3d] rounded focus:ring-[#5a5a5a] focus:border-[#5a5a5a] outline-none mb-4 text-center"
                />
                <button
                    onClick={handleVerify}
                    className="w-full py-2 rounded bg-[#3a3a3a] hover:bg-[#4a4a4a] text-[#e0e0e0]"
                >
                    Verify Code
                </button>
            </div>
        </div>
    );
}
